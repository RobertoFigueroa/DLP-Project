COMPILER MyCOCOR
(.//Especificacion de Funciones.)

CHARACTERS

letter= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit= "0123456789".

cr = CHR(13).
lf = CHR(10).
tab = CHR(9).
ignore = cr+lf+tab.
comillas = CHR(34).
stringletter = ANY-comillas-ignore.
operadores ="+-=()[]{}|.<>".
MyANY = ANY-operadores.

TOKENS

ident = letter{letter|digit} EXCEPT KEYWORDS.
string = comillas stringletter{stringletter} comillas.

char = "'"["/"]letter"'".
charnumber = "CHR("digit{digit}")".
charinterval = "CHR("digit{digit}")""..""CHR("digit{digit}")".

nontoken = MyANY.
startcode ="(.".
endcode=".)".

IGNORE ignore

PRODUCTIONS

MyCOCOR= 				(.CompilerName = "".)
					  (.EndName = "".)
	"COMPILER" 
	Ident<CompilerName>		
	(.print("Nombre Inicial del Compilador: ",CompilerName).) 
	[Codigo]
	Body
	"END" Ident<EndName>	
	(.print("Nombre Final del Compilador: ",EndName).) 
.

Body = 
	Characters 
	[Keywords] 
	Tokens 
	Productions  	
.


Characters =				(.CharName = "".)
					   (.Counter = 0.)

	"CHARACTERS"			(.print("LEYENDO CHARACTERS").)
	{
		Ident<CharName>	
		(.Counter+=1.)
		(.print("Char Set {}: {}".format(Counter,CharName)).)
		"="
		CharSet			
		{
			"+"CharSet
			|
			"-"CharSet
		}

	}
.
			 
Keywords = 				(.KeyName = "".)
					  	(.StringValue = "".)
    					(.Counter = 0.)

	"KEYWORDS"			(.print("LEYENDO KEYWORDS").)
	{
		
		Ident<KeyName>	
		(.Counter+=1.)
		(.print("KeyWord {}: {}".format(Counter,KeyName)).)
		"="
		String<StringValue>
		"."

	}

.


Tokens =				(.TokenName = "".)
					  	(.Counter = 0.)
	
	"TOKENS"			(.print("LEYENDO TOKENS").)
	{
		Ident<TokenName>	
		(.Counter+=1.)
		(.print("Token {}: {}".format(Counter,TokenName)).)
		"="
		TokenExpr
		[ExceptKeyword]
		"."

	}

.


Productions = 				(.Counter = 0.)
	
	"PRODUCTIONS"			(.ProdName = "".)
					  		(.print("LEYENDO PRODUCTIONS").)
	{
		Ident<ProdName>
		(.Counter+=1.)
		(.print("Production {}: {}".format(Counter,ProdName)).)
		[Atributos]
		"="
		[Codigo]
		ProductionExpr
		"."

	}
.

ExceptKeyword= 
	"EXCEPT"
	"KEYWORDS"
.


ProductionExpr =
	ProdTerm
	{
	"|"
	ProdTerm
	}
.

ProdTerm =
	ProdFactor
	{
	ProdFactor
	}
.

ProdFactor =
	(
	SymbolProd
	|
	"("ProductionExpr")"
	|
	"["ProductionExpr"]"
	|
	"{"ProductionExpr"}"
	)
	[Codigo]
.



SymbolProd =			(.SV = "".)
				  		(.IN = "".)
	(
	String<SV>		
	(.print("String en Production: {}".format(SV)).)
	|
	char
	|
	Ident<IN>		
	(.print("Identificador en Production: {}".format(IN)).)
	[Atributos] 
	)
.

Codigo =
	startcode
	{ ANY }
	endcode
.

Atributos =
	"<"
	{ANY}
	">"
.
	


TokenExpr=
	TokenTerm
	{
	"|"
	TokenTerm
	}
.

TokenTerm=
	TokenFactor
	{
	TokenFactor	
	}
.

TokenFactor=
	(
	SimbolToken
	|
	"("TokenExpr")"
	|
	"["TokenExpr"]"
	|
	"{"TokenExpr"}"
	)
.

SimbolToken =			(.IdentName = "".)
				  		(.StringValue = "".)		
	(
	String<StringValue>
	|
	char
	|
	Ident<IdentName>	
	(.print("Identificador en Token: {}".format(IdentName)).)
	)
.



CharSet= 			(.IdentName = "".)
				  	(.StringValue = "".)	
	(
	String<StringValue>
	|
	Char
	|
	"ANY"
	|
	Ident<IdentName>	(.print("Identificador en CharSet: {}".format(IdentName)).)
	)
	
.


Char=
	(
	char
	|
	charnumber
	|
	charinterval
	)
.


String<S>=
	string		(.S = self.prev_token.value.)
.

Ident<S>=
	ident		(.S = self.prev_token.value.)
.


END MyCOCOR