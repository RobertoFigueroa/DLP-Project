[ident = COMPILER, nontoken =  , ident = MyCOCOR, startcode = (., nontoken = /, nontoken = /, ident = Especificacion, nontoken =  , ident = de, nontoken =  , ident = Funciones, endcode = .), ident = CHARACTERS, nontoken =  , nontoken =  , nontoken =  , nontoken =  , ident = letter, PROD_TOKEN = =, nontoken =  , string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", ident = digit, PROD_TOKEN = =, nontoken =  , string = "0123456789", ident = cr, nontoken =  , PROD_TOKEN = =, nontoken =  , charnumber = CHR(13), ident = lf, nontoken =  , PROD_TOKEN = =, nontoken =  , charnumber = CHR(10), ident = tab, nontoken =  , PROD_TOKEN = =, nontoken =  , charnumber = CHR(9), ident = ignore, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = cr, PROD_TOKEN = +, ident = lf, PROD_TOKEN = +, ident = tab, ident = comillas, nontoken =  , PROD_TOKEN = =, nontoken =  , charnumber = CHR(34), ident = stringletter, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = ANY, PROD_TOKEN = -, ident = comillas, PROD_TOKEN = -, ident = ignore, ident = operadores, nontoken =  , PROD_TOKEN = =, string = "+-=()[]{}|.<>", ident = MyANY, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = ANY, PROD_TOKEN = -, ident = operadores, ident = TOKENS, nontoken =  , nontoken =  , nontoken =  , nontoken =  , ident = ident, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = letter, PROD_TOKEN = {, ident = letter, PROD_TOKEN = |, ident = digit, PROD_TOKEN = }, nontoken =  , ident = EXCEPT, nontoken =  , ident = KEYWORDS, ident = string, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = comillas, nontoken =  , ident = stringletter, PROD_TOKEN = {, ident = stringletter, PROD_TOKEN = }, nontoken =  , ident = comillas, ident = char, nontoken =  , PROD_TOKEN = =, nontoken =  , string = "'", PROD_TOKEN = [, string = "/", PROD_TOKEN = ], ident = letter, string = "'", ident = charnumber, nontoken =  , PROD_TOKEN = =, nontoken =  , string = "CHR(", ident = digit, PROD_TOKEN = {, ident = digit, PROD_TOKEN = }, string = ")", ident = charinterval, nontoken =  , PROD_TOKEN = =, nontoken =  , string = "CHR(", ident = digit, PROD_TOKEN = {, ident = digit, PROD_TOKEN = }, string = ")", string = "..", string = "CHR(", ident = digit, PROD_TOKEN = {, ident = digit, PROD_TOKEN = }, string = ")", ident = nontoken, nontoken =  , PROD_TOKEN = =, nontoken =  , ident = MyANY, ident = startcode, nontoken =  , PROD_TOKEN = =, string = "(.", ident = endcode, PROD_TOKEN = =, string = ".)", ident = IGNORE, nontoken =  , ident = ignorePRODUCTIONSMyCOCOR, PROD_TOKEN = =, nontoken =  , startcode = (., ident = CompilerName, nontoken =  , PROD_TOKEN = =, nontoken =  , nontoken = ", string = ".)  (.EndName = ", string = ".)", ident = COMPILER, string = " Ident<CompilerName>(.print(", ident = Nombre, nontoken =  , ident = Inicial, nontoken =  , ident = del, nontoken =  , ident = Compilador, nontoken = :, nontoken =  , string = ",CompilerName).) [Codigo]Body", ident = END, string = " Ident<EndName>(.print(", ident = Nombre, nontoken =  , ident = Final, nontoken =  , ident = del, nontoken =  , ident = Compilador, nontoken = :, nontoken =  , string = ",EndName).) .Body = Characters [Keywords] Tokens Productions  .Characters =(.CharName = ", string = ".)   (.Counter = 0.)", ident = CHARACTERS, string = "(.print(", ident = LEYENDO, nontoken =  , ident = CHARACTERS, string = ").){Ident<CharName>(.Counter+=1.)(.print(", ident = Char, nontoken =  , ident = Set, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(Counter,CharName)).)", PROD_TOKEN = =, string = "CharSet{", PROD_TOKEN = +, string = "CharSet|", PROD_TOKEN = -, string = "CharSet}", string = "}. Keywords = (.KeyName = ", string = ".)  (.StringValue = ", string = ".)    (.Counter = 0.)", ident = KEYWORDS, string = "(.print(", ident = LEYENDO, nontoken =  , ident = KEYWORDS, string = ").){Ident<KeyName>(.Counter+=1.)(.print(", ident = KeyWord, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(Counter,KeyName)).)", PROD_TOKEN = =, string = "String<StringValue>", string = "}.Tokens =(.TokenName = ", string = ".)  (.Counter = 0.)", ident = TOKENS, string = "(.print(", ident = LEYENDO, nontoken =  , ident = TOKENS, string = ").){Ident<TokenName>(.Counter+=1.)(.print(", ident = Token, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(Counter,TokenName)).)", PROD_TOKEN = =, string = "TokenExpr[ExceptKeyword]", string = "}.Productions = (.Counter = 0.)", ident = PRODUCTIONS, string = "(.ProdName = ", string = ".)  (.print(", ident = LEYENDO, nontoken =  , ident = PRODUCTIONS, string = ").){Ident<ProdName>(.Counter+=1.)(.print(", ident = Production, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(Counter,ProdName)).)[Atributos]", PROD_TOKEN = =, string = "[Codigo]ProductionExpr", string = "}.ExceptKeyword= ", ident = EXCEPT, nontoken = ", string = "KEYWORDS", ident = ProductionExpr, nontoken =  , PROD_TOKEN = =, ident = ProdTerm, PROD_TOKEN = {, string = "|", ident = ProdTerm, PROD_TOKEN = }, ident = ProdTerm, nontoken =  , PROD_TOKEN = =, ident = ProdFactor, PROD_TOKEN = {, ident = ProdFactor, PROD_TOKEN = }, ident = ProdFactor, nontoken =  , PROD_TOKEN = =, ident = SymbolProd, PROD_TOKEN = |, string = "(", ident = ProductionExpr, string = ")", PROD_TOKEN = |, string = "[", ident = ProductionExpr, string = "]", PROD_TOKEN = |, string = "{", ident = ProductionExpr, string = "}", PROD_TOKEN = ), PROD_TOKEN = [, ident = Codigo, PROD_TOKEN = ], ident = SymbolProd, nontoken =  , PROD_TOKEN = =, startcode = (., ident = SV, nontoken =  , PROD_TOKEN = =, nontoken =  , nontoken = ", string = ".)  (.IN = ", string = ".)(String<SV>(.print(", ident = String, nontoken =  , ident = en, nontoken =  , ident = Production, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(SV)).)|char|Ident<IN>(.print(", ident = Identificador, nontoken =  , ident = en, nontoken =  , ident = Production, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(IN)).)[Atributos] ).Codigo =startcode{ ANY }endcode.Atributos =", PROD_TOKEN = <, string = "{ANY}", PROD_TOKEN = >, string = ".TokenExpr=TokenTerm{", PROD_TOKEN = |, string = "TokenTerm}.TokenTerm=TokenFactor{TokenFactor}.TokenFactor=(SimbolToken|", string = "TokenExpr", PROD_TOKEN = ), string = "|", PROD_TOKEN = [, string = "TokenExpr", PROD_TOKEN = ], string = "|", PROD_TOKEN = {, string = "TokenExpr", PROD_TOKEN = }, string = ").SimbolToken =(.IdentName = ", string = ".)  (.StringValue = ", string = ".)(String<StringValue>|char|Ident<IdentName>(.print(", ident = Identificador, nontoken =  , ident = en, nontoken =  , ident = Token, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, string = ".format(IdentName)).)).CharSet= (.IdentName = ", string = ".)  (.StringValue = ", string = ".)(String<StringValue>|Char|", ident = ANY, string = "|Ident<IdentName>(.print(", ident = Identificador, nontoken =  , ident = en, nontoken =  , ident = CharSet, nontoken = :, nontoken =  , PROD_TOKEN = {, PROD_TOKEN = }, nontoken = "]
